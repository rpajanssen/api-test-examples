<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.abnamro.coesd</groupId>
		<artifactId>master-pom</artifactId>
		<version>3.0.0</version>
	</parent>

	<!--parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.6.RELEASE</version>
		<relativePath/>
	</parent-->

	<groupId>com.example.examples</groupId>
	<artifactId>springboot-restassured</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>springboot-restassured</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>8</java.version>

        <spring-boot.version>2.1.6.RELEASE</spring-boot.version>

        <!--
            todo : spring cloud (SR1 / 2.1.1-RELEASE is not compatible with rest assured 4.0.0
                   some io.rest-assured.internal classes are missing when running the generated test
        -->
        <rest-assured.version>4.0.0</rest-assured.version>
        <!--<rest-assured.version>3.3.0</rest-assured.version>-->
        <junit.jupiter.version>5.5.0</junit.jupiter.version>
        <rider-spring.version>1.7.2</rider-spring.version>

        <spring.fox.version>2.9.2</spring.fox.version>

        <asciidoctor.maven.plugin.version>1.6.0</asciidoctor.maven.plugin.version>
        <asciidoctorj.pdf.version>1.5.0-alpha.18</asciidoctorj.pdf.version>

        <surefire.maven.plugin.version>2.22.2</surefire.maven.plugin.version>

        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <snippetsDirectory>${project.build.directory}/snippets</snippetsDirectory>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- note: enabling the devtools - like for auto-reloads -  might cause the connection to the in-memory
             database to close premature resulting in test failures -->
        <!--dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency-->
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
		</dependency>

        <!-- START - rest-assured requirements -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured-common</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- todo : these two dependencies are required because of error in spring-boot bom -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-path</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>xml-path</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- END - rest-assured requirements -->

        <dependency>
            <groupId>com.github.database-rider</groupId>
            <artifactId>rider-spring</artifactId>
            <version>${rider-spring.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- START - swagger requirements -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${spring.fox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${spring.fox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-bean-validators</artifactId>
            <version>${spring.fox.version}</version>
        </dependency>
        <!-- END - swagger requirements -->

        <!-- JUnit 5 -->
        <!--
            Note: observe that we do not separately define de api, engine, params dependencies. We import the
            aggregator! It was a nice idea though :(.

            Note: if we use Jupiter 5.5.0 with the separate dependencies the build will fail which can only be solved
            by adding a dependency on org.junit.platform:junit-platform-commons as well.
        -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
			</plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.maven.plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>unit-tests</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skipTests>false</skipTests>
                            <includes>
                                <include>**/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>integration-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skipTests>false</skipTests>
                            <excludes>
                                <exclude>none</exclude>
                            </excludes>
                            <includes>
                                <include>**/*IT.java</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                Configuration of the plugin that will generate the rest-api documentation based upon the generated
                snippets by the integration tests using spring-rest-docs (see PersonCrudResourceUsingMockMvcIT).
            -->
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>${asciidoctor.maven.plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>${asciidoctorj.pdf.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>generate-html</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <sourceHighlighter>coderay</sourceHighlighter>
                            <backend>html</backend>
                            <doctype>book</doctype>
                            <attributes>
                                <toc/>
                                <linkcss>false</linkcss>
                                <!-- the 'snippets' variable will be made available for use in the asciidoc source file -->
                                <snippets>${snippetsDirectory}</snippets>
                            </attributes>
                            <!-- the asciidoc source file defining what will be put into the generated html -->
                            <sourceDirectory>src/docs/asciidocs</sourceDirectory>
                            <!-- the location where the generated html will be published -->
                            <outputDirectory>target/generated-docs</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-pdf</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>pdf</backend>
                            <doctype>book</doctype>
                            <sourceHighlighter>coderay</sourceHighlighter>
                            <attributes>
                                <icons>font</icons>
                                <pagenums/>
                                <toc/>
                                <idprefix/>
                                <idseparator>-</idseparator>
                                <!-- the 'snippets' variable will be made available for use in the asciidoc source file -->
                                <snippets>${snippetsDirectory}</snippets>
                            </attributes>
                            <!-- the asciidoc source file defining what will be put into the generated pdf -->
                            <sourceDirectory>src/docs/asciidocs</sourceDirectory>
                            <!-- the location where the generated pdf will be published -->
                            <outputDirectory>target/generated-docs</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
		</plugins>
	</build>
</project>
